Describe tests E and F

Test Plan E:
A special case that we noticed was when the free call was on the last location of the array. There are certain situations where the array had enough space to fit the malloc however not enough space to fit another meta datablock. Therefore, we had to give the remaining space to the malloc call. In order to test and make sure that we gave the space correctly and then freed it correctly, a test plan must be developed where we almost reach the limit of our array but make a request for just enough space for one more malloc, de allocate and then allocate again over and over again to make sure we dont lose any of the remaining bytes when we do this. 

Test plan F: This test plan will also test the limits of our free, we will be giving it pointers that are not actually values but rather random things like integers that are within our array. Furthermore we will be attempting to free up locations that originally pointed to a valid pointer, however,  some more bits added to the memory address so instead it would point somewhere in the middle of our struct.In order to ensure that our function works with a high work load, we will run the same function 100 times and within those 100 runs include filling up the array at capacity and freeing valid pointers on top of our edge case tests . Furthermore, inbetween each iteration of filling up the array and freeing, we will be running these edge cases when it is at capacity, empty and filled with some data in order to make sure it can perform under any capacity level.
